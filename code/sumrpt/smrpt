#!/usr/bin/python3
import pyodbc	
import sys

# This example program and others re-use the same Python functions many times,
# so they are loaded from local files.
import my_odbc_connect
import my_odbc_cursor


query_old = "SELECT SSN, LName, FName, MInit, COALESCE(SUM(Hours),0) AS Know_Hours FROM Employee LEFT OUTER JOIN Works_On ON (SSN=ESSN) GROUP BY SSN"

query = "SELECT SSN, LName, FName, MInit, COALESCE(SUM(Hours),0) AS Known_Hours, a.UnCount as temp, IF (a.PNo = 1 , 'yes', 'no') as unknown_hours, CASE WHEN COALESCE(SUM(Hours),0) + IF(a.UnCount IS NULL, 0, a.UnCount) > 40 THEN 'yes' WHEN COALESCE(SUM(Hours),0) + IF(a.UnCount IS NULL, 0, a.UnCount) <= 40 THEN 'no' ELSE '?' END as overtime FROM Employee RIGHT OUTER JOIN Works_On ON (SSN=ESSN) left join (SELECT ESSN, COUNT(PNo) as PNo, count(PNo) * 40 as UnCount FROM Works_On WHERE (NOT(ESSN IN(SELECT ESSN From Works_On WHERE Hours IS NOT NULL))) GROUP BY ESSN, PNo) a on a.ESSN = Employee.SSN GROUP BY SSN"

# This call produces "fancy" formatted output.
def process_query():
    cursor1.execute(query)
    print("|     SSN    |  LName   |    FName   |  MInit  |  Known_hours  |  Unknown_Hrs  |  Overtime  |")
    print("|------------|----------|------------|---------|---------------|---------------|------------|")
    n=0
    while 1:
        row = cursor1.fetchone()
        if not row:
            break
        n = n+1
        print_result(row)
    if n==0:
        print("No tuples matching the given query were found.")

def print_result(r):
    titledict = {"F":"Ms.", "M":"Mr."}
    try:
        title = titledict[r[3]]
    except:
        title = "?"
    print('|{:^12d}|{:<10.10}|{:<12.12}|{:^9}|{:^15f}|{:<15.15}|{:12.12}|'.format( int(r[0]), str(r[1]), str(r[2]), r[3], r[4], str(r[6]), str(r[7])))
    #print('|{:.12}|'.format(r[1]))

    #print(" %s %s %s "%(r[0], r[1], r[2]))
    

print("")

connection1 = my_odbc_connect.establish_connection("pwd")
print("")
cursor1 = my_odbc_cursor.establish_cursor(connection1)
print("")
process_query()
print("")
my_odbc_cursor.close_cursor(cursor1)
print("")
my_odbc_connect.close_connection(connection1)


