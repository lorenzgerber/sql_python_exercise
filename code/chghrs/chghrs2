#!/usr/bin/python3
import pyodbc	
import sys

# This example program and others re-use the same Python functions many times,
# so they are loaded from local files.
import my_odbc_connect
import my_odbc_cursor

delete="DELETE FROM Works_On WHERE ESSN=? AND PNo=?;"
update="UPDATE Works_On SET Hours = ? WHERE ESSN=? AND PNo=?;"
insert="INSERT INTO Works_On VALUES(?, ?, ?)"
upsert="INSERT INTO Works_ON VALUES(?, ?, ?) ON DUPLICATE KEY UPDATE Hours = ?;"

def check_input_args():
    if len(sys.argv) < 7:
        sys.stderr.write("Usage: chghrs <DBNname> <UserID> <pwdarg> "
                         "<SSN> <PNo> <Hours>\n")
        sys.exit()
    if sys.argv[6] == 'NULL':
        val = sys.argv[6]
    else:
        try:
           val = int(sys.argv[6])
        except ValueError:
                  sys.stderr.write("Arguments <Hours> needs to be a "
                                   "number between 0 and 40 or ""NULL""\n")
                  sys.exit()	  
        if (val < 0 or val > 40):
            sys.stderr.write("Arguments <Hours> needs to be a number "
                             "between 0 and 40 or ""NULL""\n")
            sys.exit()
    
    try:
        PNo = int(sys.argv[5])
    except ValueError:
            sys.stderr.write("Argument <PNo> has to be a number\n")
            sys.exit()
    try:
        test = int(sys.argv[4])
        SSN = sys.argv[4]
    except ValueError:
            sys.stderr.write("Argument <SSN> has to be a number\n")
            sys.exit()
            
    
    input = {'SSN': SSN, 'PNo': PNo, 'Hours': val}

    return input;
    
def execute_command(input, cursor1):
    if(input['Hours'] == 0):
        try:
            success=cursor1.execute(delete, input['SSN'], input['PNo']).rowcount
        except (pyodbc.IntegrityError, pyodbc.Error) as e:
            sys.stderr.write("Could not delete working hour assignment of "
                             "employee {} on project {}\n".format( input['SSN'], input['PNo']))
            sys.stderr.write("Giving following exception:  ")
            sys.stderr.write(str(e))
            sys.stderr.write("\n")
        if success != 1:
            sys.stderr.write("Could not delete working hours for employee {} "
                             "on PNo {}\n".format(input['SSN'],input['PNo']))
            sys.exit()
        cursor1.commit()
        sys.stderr.write("Working hours for employee {} on project {} were successfully "
                         "deleted\n".format(input['SSN'], input['PNo']))
    else:
        try:
            successIn=cursor1.execute(insert, input['SSN'], input['PNo'], input['Hours']).rowcount
            except (pyodbc.IntegrityError, pyodbc.Error) as e:
                sys.stderr.write("Could not execute insert for employee "
                                 "{} working on {} for {}Hrs:\n".format(input['SSN'], input['PNo'], input['Hours']))
                sys.stderr.write(str(e))
                sys.stderr.write("\n")
            if successIn == 1:
                sys.stderr.write("Succesfully inserted person SSN {} working on "
                                 "PNo {} for {} hours\n".format(input['SSN'], input['PNo'], input['Hours']))
                sys.exit()
        try:
            success=cursor1.execute(update, input['Hours'], input['SSN'], input['PNo']).rowcount
        except (pyodbc.IntegrityError, pyodbc.Error) as e:
            sys.stderr.write("Could not execute update working hours for employee "
                             "{} working on {} for {}Hrs:\n".format(input['SSN'],
                                                                   input['PNo'], input['Hours']))
            sys.stderr.write(str(e))
            sys.stderr.write("\n")
            
                sys.exit()
        cursor1.commit()
        sys.stderr.write("Number of hours which employee {} works on project "
                         "{} successfully changed to {}\n".format(input['SSN'], input['PNo'], input['Hours']))

input = check_input_args()

connection1 = my_odbc_connect.establish_connection("cmdln")
cursor1 = my_odbc_cursor.establish_cursor(connection1)

execute_command(input, cursor1)

my_odbc_cursor.close_cursor(cursor1)
my_odbc_connect.close_connection(connection1)


